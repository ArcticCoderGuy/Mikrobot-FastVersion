# Generated by Django 4.2.7 on 2025-08-04 16:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('subscription_tier', models.CharField(choices=[('BASIC', 'Basic - $99/month'), ('PROFESSIONAL', 'Professional - $199/month'), ('ENTERPRISE', 'Enterprise - $499/month'), ('TRIAL', 'Free Trial')], default='TRIAL', max_length=20)),
                ('subscription_active', models.BooleanField(default=False)),
                ('subscription_expires', models.DateTimeField(blank=True, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=100)),
                ('risk_level', models.CharField(choices=[('CONSERVATIVE', 'Conservative (0.25%)'), ('MODERATE', 'Moderate (0.55%)'), ('AGGRESSIVE', 'Aggressive (1.0%)'), ('CUSTOM', 'Custom')], default='MODERATE', max_length=20)),
                ('custom_risk_percent', models.DecimalField(decimal_places=3, default=0.55, max_digits=5, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('max_concurrent_trades', models.PositiveIntegerField(default=3)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_documents_uploaded', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('trading_experience', models.CharField(choices=[('BEGINNER', 'Beginner (< 1 year)'), ('INTERMEDIATE', 'Intermediate (1-3 years)'), ('ADVANCED', 'Advanced (3-5 years)'), ('EXPERT', 'Expert (5+ years)')], default='BEGINNER', max_length=20)),
                ('preferred_trading_sessions', models.JSONField(default=list, help_text="Array of preferred trading sessions: ['LONDON', 'NEW_YORK', 'TOKYO', 'SYDNEY']")),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=False)),
                ('push_notifications', models.BooleanField(default=True)),
                ('dashboard_theme', models.CharField(choices=[('LIGHT', 'Light'), ('DARK', 'Dark')], default='LIGHT', max_length=10)),
                ('dashboard_layout', models.JSONField(default=dict, help_text='Custom dashboard layout configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='LoginHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True)),
                ('failure_reason', models.CharField(blank=True, max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Login History',
                'verbose_name_plural': 'Login History',
                'db_table': 'login_history',
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='TradingAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Account nickname', max_length=100)),
                ('broker', models.CharField(choices=[('FTMO', 'FTMO'), ('MYFOREXFUNDS', 'MyForexFunds'), ('FUNDEDNEXT', 'FundedNext'), ('TOPSTEPTRADER', 'TopstepTrader'), ('INTERACTIVE_BROKERS', 'Interactive Brokers'), ('OANDA', 'OANDA'), ('OTHER', 'Other')], max_length=50)),
                ('account_type', models.CharField(choices=[('DEMO', 'Demo Account'), ('LIVE', 'Live Account'), ('PROP', 'Prop Firm Account')], max_length=10)),
                ('mt5_login', models.CharField(max_length=255)),
                ('mt5_password', models.TextField()),
                ('mt5_server', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=False)),
                ('auto_trading_enabled', models.BooleanField(default=False)),
                ('daily_loss_limit', models.DecimalField(decimal_places=2, default=500.0, help_text='Maximum daily loss in USD', max_digits=10)),
                ('total_loss_limit', models.DecimalField(decimal_places=2, default=2000.0, help_text='Maximum total loss in USD', max_digits=10)),
                ('last_connection', models.DateTimeField(blank=True, null=True)),
                ('connection_status', models.CharField(default='DISCONNECTED', max_length=50)),
                ('last_balance_update', models.DateTimeField(blank=True, null=True)),
                ('current_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trading_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trading Account',
                'verbose_name_plural': 'Trading Accounts',
                'db_table': 'trading_accounts',
                'unique_together': {('user', 'mt5_login', 'mt5_server')},
            },
        ),
    ]
